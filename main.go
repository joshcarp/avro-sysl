package avrosysl

import (
	"bytes"
	"encoding/json"
	"github.com/anz-bank/protoc-gen-sysl/syslpopulate"
	"github.com/anz-bank/sysl/pkg/sysl"
	syslprinter "github.com/joshcarp/sysl-printer"
)
var TypeMapping = map[string]sysl.Type_Primitive{
	"bytes":  sysl.Type_BYTES,
	"int":  sysl.Type_INT,
	"int32":  sysl.Type_INT,
	"uint32": sysl.Type_INT,
	"uint64": sysl.Type_INT,
	"string": sysl.Type_STRING,
	"boolean":   sysl.Type_BOOL,
	"double": sysl.Type_FLOAT,
	"long": sysl.Type_FLOAT,
	"float":  sysl.Type_FLOAT,
}

type AutoGenerated struct {
	Type      string   `json:"type"`
	Namespace string   `json:"namespace"`
	Name      string   `json:"name"`
	Fields    []Fields1 `json:"fields"`
}
type Fields1 struct {
	Name    string      `json:"name"`
	Type    json.RawMessage      `json:"type"`
	Doc     string      `json:"doc,omitempty"`
	Fields []Fields1 `json:"fields"`
	Symbols []string `json:"symbols"`
	Default interface{} `json:"default,omitempty"`
}

func Convert(avro string)string {
	a := AutoGenerated{}
	json.Unmarshal([]byte(avro), &a)
	App := syslpopulate.NewApplication(a.Name)
	for _, field := range a.Fields{
		AddTypesToApp(App, &field)
	}
	b := bytes.Buffer{}
	syslprinter.NewPrinter(&b).PrintApplication(App)
	return b.String()
}

func AddTypesToApp(App *sysl.Application, field2 *Fields1) (string, string, *Fields1) {
	attrDefs := make(map[string]*sysl.Type)
	t, name, stru := jsonType(field2.Type)
	attrDefs2 := make(map[string]*sysl.Type)
	if t != "primitive"{
		attrDefs2[field2.Name] = syslpopulate.SyslStruct(name, App.Name.Part[0])
		App.Types[field2.Name] = &sysl.Type{
			Type: &sysl.Type_Tuple_{
				Tuple: &sysl.Type_Tuple{
					AttrDefs: attrDefs2,
				},
			},
		}
	}

	switch t{
	case "enum":
		App.Types[name] = &sysl.Type{
			Type: &sysl.Type_Enum_{
				Enum: &sysl.Type_Enum{
					Items: map[string]int64{"placeholder":1},
				},
			},
		}
		attrDefs[name] = syslpopulate.SyslStruct(name, App.Name.Part[0])

	case "", "struct":
		if stru != nil && stru.Fields != nil{
			for _, field := range stru.Fields{
				x, y, f := AddTypesToApp(App, &field)
				if x == "primitive"{
					attrDefs[field.Name] = syslpopulate.SyslPrimitive(TypeMapping[y])
				} else{
					attrDefs[field.Name] = syslpopulate.SyslStruct(y, App.Name.Part[0])
				}
				if f != nil{
					AddTypesToApp(App, f)
				}
			}
		}
		App.Types[name] = syslpopulate.SyslStruct(name, App.Name.Part[0])
		AddTypesToApp(App, stru)
		App.Types[name] = &sysl.Type{
			Type: &sysl.Type_Tuple_{
				Tuple: &sysl.Type_Tuple{
					AttrDefs: attrDefs,
				},
			},
		}
	case "primitive":
		attrDefs[field2.Name] = syslpopulate.SyslPrimitive(TypeMapping[name])
		return t, name, stru
	}

	return t, name, stru
}

func jsonType(j json.RawMessage)(string, string, *Fields1){
	slice := []string{}
	json.Unmarshal(j, &slice)
	if len(slice) != 0{
		for _, e := range slice{
			if e != "null"{
				return "primitive", e, nil
			}
		}
	}
	enum := Fields1{}
	json.Unmarshal(j, &enum)
	if enum.Symbols != nil{
		return "enum", enum.Name, &enum
	} else if enum.Fields != nil{
		return "struct", enum.Name, &enum
	}
	str := ""
	json.Unmarshal(j, &str)
	if str != ""{
		return "primitive", str, nil
	}
	return "", "", nil
}